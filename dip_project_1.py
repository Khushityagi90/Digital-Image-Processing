# -*- coding: utf-8 -*-
"""DIP_Project_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17zXvPF8HWWO7qDBYGMVxDf4Td7PwBrZd
"""

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from google.colab import drive

from google.colab import drive
drive.mount('/content/drive')

def load_and_process_image(image_path):
    image = tf.io.read_file(image_path)
    image = tf.image.decode_image(image, channels=3)
    gray = tf.image.rgb_to_grayscale(image)
    gray = tf.cast(gray, tf.float32)

    return image,gray

import os

image_path = r'/content/drive/MyDrive/DIP_1.jpg'
if os.path.exists(image_path):
  print(f"File found at: {image_path}")
else:
  print(f"File not found at: {image_path}")

image_path = r'/content/drive/MyDrive/DIP_1.jpg'
color_original,grey_original = load_and_process_image(image_path)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(color_original)
plt.title('Original Color Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(tf.squeeze(grey_original), cmap='gray')
plt.title('GreyScaled Image')
plt.axis('off')

plt.tight_layout()
plt.show()

def negative_transformation(image):
    return 255.0 - image

def log_transformation(image, c=1.0):
    return c * tf.math.log1p(image)

def inverse_transformation(image, c=1.0):
     return c*(tf.exp(image))

def gamma_transformation(image, c= 1.0,gamma=2.0):
    return c*tf.pow(image, gamma)

Stransformations = {
    'Negative': negative_transformation(grey_original),
    'Log (c=1.0)': log_transformation(grey_original, c=1.0),
    'Inverse (c=1.0)': inverse_transformation(grey_original, c=1.0),
    'Power (gamma=2.0)': gamma_transformation(grey_original,c=1.0, gamma=2.0),
    'Root (gamma=1/2)': gamma_transformation(grey_original,c=1.0, gamma=1/2)
}

plt.figure(figsize=(10, 15))

plt.subplot(2, 3, 1)
plt.imshow(tf.squeeze(grey_original), cmap='gray')
plt.title('Original GreyScale')

for i, (name, img) in enumerate(Stransformations.items(), 2):
    plt.subplot(2, 3, i)
    plt.imshow(tf.squeeze(img), cmap='gray')
    plt.title(name)

plt.tight_layout()
plt.show()